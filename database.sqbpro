<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="database.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="1"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="2147"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title="Transactions" custom_title="0" dock_id="2" table="4,12:mainTransactions"/><dock_state state="000000ff00000000fd00000001000000020000033b00000226fc0100000002fb000000160064006f0063006b00420072006f00770073006500310100000000ffffffff0000000000000000fb000000160064006f0063006b00420072006f007700730065003201000000000000033b0000011800ffffff0000033b0000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="ActiveSellersView" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="50"/><column index="2" value="39"/><column index="3" value="39"/><column index="4" value="84"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Transactions" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="44"/><column index="2" value="59"/><column index="3" value="53"/><column index="4" value="51"/><column index="5" value="156"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Users" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="50"/><column index="2" value="124"/><column index="3" value="156"/><column index="4" value="300"/><column index="5" value="54"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">-- ----------------------------------------------------------------
-- TRIGGERS (AUTOMATION)
-- This section creates automated actions in the database.
-- ----------------------------------------------------------------

-- TRIGGER 1: UpdateSalesCount
-- PURPOSE: Automatically increments the 'sales_count' in the Notes table
--          every time a new record is inserted into the Transactions table.
-- EVENT:   Fires AFTER every INSERT on the Transactions table.

CREATE TRIGGER UpdateSalesCount
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
    -- For the note that was just purchased (identified by NEW.note_id),
    -- increase its sales_count by 1.
    UPDATE Notes
    SET sales_count = sales_count + 1
    WHERE note_id = NEW.note_id;
END;


-- ----------------------------------------------------------------
-- VIEWS (REPORTING SHORTCUTS)
-- This section creates virtual tables to simplify complex queries.
-- ----------------------------------------------------------------

-- VIEW 1: TopSellingNotesView
-- PURPOSE: Creates a simple, pre-built query to see the top 5
--          most popular notes based on their sales count.
-- USAGE:   You can query this view like a normal table: &quot;SELECT * FROM TopSellingNotesView;&quot;

CREATE VIEW TopSellingNotesView AS
SELECT
    note_id,
    title,
    subject,
    sales_count
FROM Notes
ORDER BY sales_count DESC
LIMIT 5;


-- VIEW 2: ActiveSellersView
-- PURPOSE: Creates a list of sellers who have uploaded more than 5 notes,
--          along with their total upload count.
-- USAGE:   &quot;SELECT * FROM ActiveSellersView;&quot;

CREATE VIEW ActiveSellersView AS
SELECT
    u.user_id,
    u.name,
    u.email,
    COUNT(n.note_id) AS total_uploads
FROM Users u
JOIN Notes n ON u.user_id = n.seller_id
GROUP BY u.user_id
HAVING COUNT(n.note_id) &gt; 5;

</sql><current_tab id="0"/></tab_sql></sqlb_project>
